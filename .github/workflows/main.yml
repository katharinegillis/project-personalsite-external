name: Deploy to Staging

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  DEPLOY_URL: staging.externals.katiecordescodes.com
  REGISTRY_URL: https://registry.ops.katiecordescodes.com
  APP_ENV: prod

jobs:
  build:
    runs-on: ubuntu-latest

    environment: staging

    steps:
      - uses: actions/checkout@v2

      - name: Discord build start notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: "Starting build for {{ EVENT_PAYLOAD.repository.full_name }} on branch ${{ github.ref }}"

      - name: Fetch docker cache
        uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true

      - name: Build image(s)
        run: docker-compose build

      - name: Log in to private registry for building
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push image(s)
        run: docker-compose push

      - name: Create deploy package
        run: chmod +x deploy-package.sh && ./deploy-package.sh

      - name: Deploy new docker-compose configs and .env setup script to production
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          source: "deploy.tar.gz"
          target: ${{ secrets.DEPLOY_PATH }}

      - name: Unpack deploy package
        uses: appleboy/ssh-action@master
        env:
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          envs: DEPLOY_PATH
          script: cd $DEPLOY_PATH && tar -zxf deploy.tar.gz

      - name: Log in to private registry on the server
        uses: appleboy/ssh-action@master
        env:
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
          REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
          REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
          REGISTRY_URL: ${{ env.REGISTRY_URL }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          envs: REGISTRY_PASSWORD,REGISTRY_USERNAME,REGISTRY_URL,DEPLOY_PATH
          script: |
            echo "$REGISTRY_PASSWORD" > $DEPLOY_PATH/dockerlogin.txt
            cat $DEPLOY_PATH/dockerlogin.txt | docker login --username $REGISTRY_USERNAME --password-stdin $REGISTRY_URL
            rm -rf $DEPLOY_PATH/dockerlogin.txt

      - name: Deploy the application
        uses: appleboy/ssh-action@master
        env:
          SITE_URL: ${{ env.DEPLOY_URL }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
          APP_SECRET: ${{ secrets.APP_SECRET }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          envs: SITE_URL,DEPLOY_PATH
          script: |
            export SITE_URL=$SITE_URL
            export DEPLOY_PATH=$DEPLOY_PATH
            chmod +x $DEPLOY_PATH/deploy.sh
            cd $DEPLOY_PATH
            $DEPLOY_PATH/deploy.sh

      - name: Log out of the registry on the server
        uses: appleboy/ssh-action@master
        env:
          REGISTRY_URL: ${{ env.REGISTRY_URL }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          envs: REGISTRY_URL
          script: |
            docker logout $REGISTRY_URL
            rm -rf $HOME/.docker/config.json

      - name: Discord build start notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: "Build successful for {{ EVENT_PAYLOAD.repository.full_name }} on branch ${{ github.ref }}"

  discord:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Get job conclusion
        uses: technote-space/workflow-conclusion-action@v2

      - name: Discord build start notification
        if: env.WORKFLOW_CONCLUSION == 'failure' # notify only if failure
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: "Build FAILED for {{ EVENT_PAYLOAD.repository.full_name }} on branch ${{ github.ref }}"
